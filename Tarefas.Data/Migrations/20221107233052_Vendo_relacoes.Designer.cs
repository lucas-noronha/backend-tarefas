// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tarefas.Data;

#nullable disable

namespace Tarefas.Data.Migrations
{
    [DbContext(typeof(TarefasDb))]
    [Migration("20221107233052_Vendo_relacoes")]
    partial class Vendo_relacoes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tarefas.Domain.Entities.Chamado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<Guid>("CriadorId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_criador");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<DateTime>("DataPrevista")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_prevista");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<Guid>("ResponsavelId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_responsavel");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TipoChamado")
                        .HasColumnType("integer")
                        .HasColumnName("tipo");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CriadorId");

                    b.HasIndex("ResponsavelId");

                    b.ToTable("chamados", (string)null);
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cidade");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inativo");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logradouro");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.HistoricoChamado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Anotacao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("anotacao");

                    b.Property<Guid>("ChamadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_chamado");

                    b.Property<DateTime>("DataOcorrencia")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_ocorrencia");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("ChamadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("historicos_chamados", (string)null);
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.TempoGasto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Atividade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("atividade");

                    b.Property<Guid>("ChamadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_chamado");

                    b.Property<DateTime>("DataAtividade")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<TimeSpan>("Tempo")
                        .HasColumnType("interval")
                        .HasColumnName("tempo_gasto");

                    b.HasKey("Id");

                    b.HasIndex("ChamadoId");

                    b.ToTable("tempo_gasto", (string)null);
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_criacao");

                    b.Property<bool>("Inativo")
                        .HasColumnType("boolean")
                        .HasColumnName("inativo");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("senha");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_usuario");

                    b.HasKey("Id");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.Chamado", b =>
                {
                    b.HasOne("Tarefas.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tarefas.Domain.Entities.Usuario", "Criador")
                        .WithMany()
                        .HasForeignKey("CriadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tarefas.Domain.Entities.Usuario", "Responsavel")
                        .WithMany("Tarefas")
                        .HasForeignKey("ResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Criador");

                    b.Navigation("Responsavel");
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.HistoricoChamado", b =>
                {
                    b.HasOne("Tarefas.Domain.Entities.Chamado", "Chamado")
                        .WithMany("Historico")
                        .HasForeignKey("ChamadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tarefas.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chamado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.TempoGasto", b =>
                {
                    b.HasOne("Tarefas.Domain.Entities.Chamado", "Chamado")
                        .WithMany("TempoGasto")
                        .HasForeignKey("ChamadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chamado");
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.Chamado", b =>
                {
                    b.Navigation("Historico");

                    b.Navigation("TempoGasto");
                });

            modelBuilder.Entity("Tarefas.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Tarefas");
                });
#pragma warning restore 612, 618
        }
    }
}
